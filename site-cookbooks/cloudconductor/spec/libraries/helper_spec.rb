require_relative '../spec_helper'
require_relative '../../libraries/helper'
require_relative '../../libraries/consul_helper.rb'
require_relative '../../libraries/consul_helper_kv.rb'

describe CloudConductor::Helper do
  def cookbook_root
    File.expand_path('../../', File.dirname(__FILE__))
  end

  def cookbook_name
    File.basename(cookbook_root)
  end

  let(:recipe) do
    cookbook_version = Chef::CookbookVersion.new(cookbook_name, cookbook_root)
    cookbook_versions = { cookbook_name => cookbook_version }
    cookbook_collection = Chef::CookbookCollection.new(cookbook_versions)
    node = Chef::Node.new
    node.set['cloudconductor']['servers'] = {}
    node.set['cloudconductor']['salt'] = 'db310da43d290e5dd54e5e2c5926385c'

    events = Chef::EventDispatch::Dispatcher.new
    run_context = Chef::RunContext.new(node, cookbook_collection, events)
    Chef::Recipe.new(cookbook_name, 'test', run_context)
  end

  describe '#generate_password' do
    before do
      @helper = recipe
      @helper.extend CloudConductor::Helper
    end

    it 'return generate_password string that length is 64 characters' do
      expect(@helper.generate_password).to match(/[0-9a-f]{64}/)
    end

    it 'return random string that generated by salt' do
      expect(@helper.generate_password).to eq('4d6240ace778fbf59ef9784869d54b40282a323adb7b762fb4e7ee7e1b93c0df')
    end

    it 'return same random string if passed same keys' do
      random1 = @helper.generate_password('key')
      random2 = @helper.generate_password('key')

      expect(random1).to eq(random2)
    end

    it 'return different random string if passed different keys' do
      random1 = @helper.generate_password('key1')
      random2 = @helper.generate_password('key2')

      expect(random1).not_to eq(random2)
    end
  end
  describe '#primary_private_ip' do
    before do
      @helper = recipe
      @helper.extend CloudConductor::Helper
      @helper.run_context.node.set['cloudconductor']['servers'] = {
        'server1' => { 'roles' => 'ap', 'private_ip' => '127.0.0.1' }
      }
      @helper.run_context.node.set['cloudconductor']['networks'] = {
        'server1' => {
          'port1' => {
            'virtual_address' => '10.0.0.1'
          }
        }
      }
    end

    it 'return virtual address on host from cloudconductor attributes' do
      expect(@helper.primary_private_ip('server1')).to match('10.0.0.1')
    end

    describe 'no hostname on servers attributes' do
      it 'return nil' do
        expect(@helper.primary_private_ip('server100')).to match(nil)
      end
    end

    describe 'no networks on cloudconductor attributes' do
      it 'return private ip of host' do
        @helper.run_context.node.set['cloudconductor']['networks'] = {}
        allow(CloudConductor::ConsulClient::KeyValueStore).to receive(:keys).and_return('')
        expect(@helper.primary_private_ip('server1')).to match('127.0.0.1')
      end
    end

    describe 'no hostname on networks attributes' do
      it 'return private ip of host' do
        @helper.run_context.node.set['cloudconductor']['networks'] = {
          'server2' => {
            'port1' => {
              'virtual_address' => '10.0.0.1'
            }
          }
        }
        expect(@helper.primary_private_ip('server1')).to match('127.0.0.1')
      end
    end
  end

  describe '#pick_servers_as_role' do
    before do
      @helper = recipe
      @helper.extend CloudConductor::Helper
      @helper.run_context.node.set['cloudconductor']['servers'] = {
        'web' => { 'roles' => 'web', 'private_ip' => '127.0.0.1' },
        'ap1' => { 'roles' => 'ap', 'private_ip' => '127.0.0.2' },
        'ap2' => { 'roles' => 'ap', 'private_ip' => '127.0.0.3' },
        'db1' => { 'roles' => 'db', 'private_ip' => '127.0.0.4' },
        'db2' => { 'roles' => 'db', 'private_ip' => '127.0.0.5' }
      }
    end
    it 'return hash of argument roll' do
      expect(@helper.pick_servers_as_role('web')).to eq(
        ['roles' => 'web', 'private_ip' => '127.0.0.1', 'hostname' => 'web']
      )
      expect(@helper.pick_servers_as_role('ap')).to eq(
        [{ 'roles' => 'ap', 'private_ip' => '127.0.0.2', 'hostname' => 'ap1' },
         { 'roles' => 'ap', 'private_ip' => '127.0.0.3', 'hostname' => 'ap2' }]
      )
      expect(@helper.pick_servers_as_role('db')).to eq(
        [{ 'roles' => 'db', 'private_ip' => '127.0.0.4', 'hostname' => 'db1' },
         { 'roles' => 'db', 'private_ip' => '127.0.0.5', 'hostname' => 'db2' }]
      )
    end
  end
  describe '#ap_servers' do
    before do
      @helper = recipe
      @helper.extend CloudConductor::Helper
      @helper.run_context.node.set['cloudconductor']['servers'] = {
        'web' => { 'roles' => 'web', 'private_ip' => '127.0.0.1' },
        'ap1' => { 'roles' => 'ap', 'private_ip' => '127.0.0.2' },
        'ap2' => { 'roles' => 'ap', 'private_ip' => '127.0.0.3' },
        'db' => { 'roles' => 'db', 'private_ip' => '127.0.0.4' }
      }
    end
    it 'return hash of ap roll only' do
      expect(@helper.ap_servers).to eq(
        [{ 'roles' => 'ap', 'private_ip' => '127.0.0.2', 'hostname' => 'ap1' },
         { 'roles' => 'ap', 'private_ip' => '127.0.0.3', 'hostname' => 'ap2' }]
      )
    end
  end
  describe '#db_servers' do
    before do
      @helper = recipe
      @helper.extend CloudConductor::Helper
      @helper.run_context.node.set['cloudconductor']['servers'] = {
        'ap' => { 'roles' => 'ap', 'private_ip' => '127.0.0.2' },
        'db1' => { 'roles' => 'db', 'private_ip' => '127.0.0.4' },
        'db2' => { 'roles' => 'db', 'private_ip' => '127.0.0.5' }
      }
    end
    it 'return hash of db roll only' do
      expect(@helper.db_servers).to eq(
        [{ 'roles' => 'db', 'private_ip' => '127.0.0.4', 'hostname' => 'db1' },
         { 'roles' => 'db', 'private_ip' => '127.0.0.5', 'hostname' => 'db2' }]
      )
    end
  end
  describe '#first_ap_server' do
    before do
      @helper = recipe
      @helper.extend CloudConductor::Helper
      @helper.run_context.node.set['cloudconductor']['servers'] = {
        'ap1' => { 'roles' => 'ap', 'private_ip' => '127.0.0.2' },
        'ap2' => { 'roles' => 'ap', 'private_ip' => '127.0.0.3' }
      }
    end
    it 'return hash of ap roll of first' do
      expect(@helper.first_ap_server).to eq(
        'roles' => 'ap', 'private_ip' => '127.0.0.2', 'hostname' => 'ap1'
      )
    end
  end
  describe '#first_db_server' do
    before do
      @helper = recipe
      @helper.extend CloudConductor::Helper
      @helper.run_context.node.set['cloudconductor']['servers'] = {
        'db1' => { 'roles' => 'db', 'private_ip' => '127.0.0.2' },
        'db2' => { 'roles' => 'db', 'private_ip' => '127.0.0.3' }
      }
    end
    it 'return hash of db roll of first' do
      expect(@helper.first_db_server).to eq(
        'roles' => 'db', 'private_ip' => '127.0.0.2', 'hostname' => 'db1'
      )
    end
  end
end
